https://kubernetes.io/docs/tasks
https://hbayraktar.medium.com/how-to-install-kubernetes-cluster-on-ubuntu-22-04-step-by-step-guide-7dbf7e8f5f99
https://phoenixnap.com/kb/install-kubernetes-on-ubuntu
https://www.linuxtechi.com/install-kubernetes-on-ubuntu-22-04/
https://www.cherryservers.com/blog/install-kubernetes-on-ubuntu

												 <   BASIC	  >
################################################ <INSTALLATION> ######################################################

1.Update the apt package index and install packages needed to use the Kubernetes apt repository:

sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl

sudo apt install docker.io
sudo systemctl start docker
sudo systemctl enable docker
apt-get install curl

2.Download the public signing key for the Kubernetes package repositories. The same signing key is used for all repositories so you can disregard the version in the URL:

# If the folder `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg # allow unprivileged APT programs to read this keyring

3.Add the appropriate Kubernetes apt repository. If you want to use Kubernetes version different than v1.29, replace v1.29 with the desired minor version in the command below:

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list   # helps tools such as command-not-found to work correctly

4.Update apt package index, then install kubectl:

sudo apt-get update
sudo apt-get install kubelet kubeadm kubectl kubernetes-cni
kubectl version --client

########################################### <swap with other server> #################################################

sudo swapoff -a
sudo kubeadm init

################################################ <start cluster> #####################################################

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config 
sudo chown $(id -u):$(id -g) $HOME/.kube/config

################################################ <deploying pod> #####################################################

sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel-rbac.yml
sudo kubectl get pods --all-namespaces

######################################################################################################################
												master-node installation
######################################################################################################################
------------------------------> Set up Docker
sudo apt update
sudo apt install docker.io docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 
sudo systemctl enable docker
sudo systemctl status docker
sudo systemctl start docker

------------------------------> Install Kubernetes
--------------- > Step 1: Add Kubernetes Signing Key
sudo apt update -y
sudo apt install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg

--------------- > Step 2: Add Software Repositories
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl 
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list   # helps tools such as command-not-found to work correctly
sudo apt-get update

--------------- > Step 3: Install Kubernetes Tools
sudo apt install kubeadm kubelet kubectl
sudo apt-mark hold kubeadm kubelet kubectl
kubeadm version

------------------------------> Deploy Kubernetes

--------------- > Step 1: Prepare for Kubernetes Deployment

sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab #(change swap to command in fstab)

sudo nano /etc/modules-load.d/containerd.conf
_____________
overlay
br_netfilter
_____________
sudo modprobe overlay
sudo modprobe br_netfilter
sudo apt install ebtables -y

sudo nano /etc/sysctl.d/kubernetes.conf
_____________
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
_____________
sudo sysctl --system
lsmod | grep overlay
lsmod | grep br_netfilter
sysctl net.bridge.bridge-nf-call-ip6tables net.bridge.bridge-nf-call-iptables net.ipv4.ip_forward 
sudo apt update -y

--------------- > Step 2: Assign Unique Hostname for Each Server Node

sudo hostnamectl set-hostname master-node
sudo nano /etc/hosts
_____________
10.0.0.1	master-node
10.0.0.2	worker-node1
10.0.0.3	worker-node2
_____________
--------------- > Step 3: Initialize Kubernetes on Master Node
sudo nano /etc/default/kubelet
_____________
KUBELET_EXTRA_ARGS="--cgroup-driver=cgroupfs"
_____________
sudo systemctl daemon-reload && sudo systemctl restart kubelet

nano /etc/containerd/config.toml
_____________edit
	SystemdCgroup = True
_____________

sudo nano /etc/docker/daemon.json
_____________
{
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
      "max-size": "100m"
   },
       "storage-driver": "overlay2"
       }
_____________
sudo systemctl daemon-reload && sudo systemctl restart docker
 sudo nano /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
_____________
Environment="KUBELET_EXTRA_ARGS=--fail-swap-on=false"
_____________
sudo systemctl daemon-reload && sudo systemctl restart kubelet

sudo kubeadm init --control-plane-endpoint=master-node --upload-certs

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

--------------- > Step 4: Deploy Pod Network to Cluster

kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
kubectl taint nodes --all node-role.kubernetes.io/control-plane-

--------------- > Step 5: Join Worker Node to Cluster

sudo systemctl stop apparmor && sudo systemctl disable apparmor
sudo systemctl restart containerd.service

sudo kubeadm join [master-node-ip]:6443 --token [token] --discovery-token-ca-cert-hash sha256:[hash]
kubectl get nodes

------------------------------> join nodes to master-node

kubeadm token create --print-join-command 		# Run in master node

# copy the result to run in worker-nodes

######################################################################################################################

kubeadm init --pod-network-cidr=192.168.10.0/16 --kubernetes-version "1.29.3"
kubeadm reset
kubeadm init --pod-network-cidr=192.168.10.0/16 --kubernetes-version "1.29.3"
kubectl get pods
kubectl get nodes

#######################################################################################################################################
------------------------------------------------- master node configure ---------------------------------------------------------------
#######################################################################################################################################

													DOCKER - INSTALL
										----------------------------------------

sudo apt update

sudo apt install apt-transport-https ca-certificates curl software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"

sudo apt install docker-ce

sudo systemctl status docker


													KUBERNATE - INSTALL
											----------------------------------

######### 1) Set hostname on Each Node  ###############

sudo hostnamectl set-hostname "k8smaster.example.net"
sudo hostnamectl set-hostname "k8sworker1.example.net"   // 1st worker node
sudo hostnamectl set-hostname "k8sworker2.example.net"   // 2nd worker node


######## 2) Disable swap & Add kernel Parameters #########

sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter


sudo tee /etc/sysctl.d/kubernetes.conf <<EOT
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOT

sudo sysctl --system


######## 3) Install Containerd Runtime ##########

sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"


sudo apt update
sudo apt install -y containerd.io

containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml


sudo systemctl restart containerd
sudo systemctl enable containerd


####### 4) Add Apt Repository for Kubernetes ###########


curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
 
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list



###### 5) Install Kubectl, Kubeadm and Kubelet ########

sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl



####### 6) Install Kubernetes Cluster on Ubuntu 22.04 #######

sudo kubeadm init --control-plane-endpoint=k8smaster.example.net

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl cluster-info
kubectl get nodes


###### 8) Install Calico Network Plugin ##########


kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/calico.yaml

kubectl get pods -n kube-system

kubectl get nodes
#######################################################################################################################################
------------------------------------------------- worker node configure ---------------------------------------------------------------
#######################################################################################################################################
												DOCKER - INSTALL
										-----------------------------------
sudo apt update

sudo apt install apt-transport-https ca-certificates curl software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"

sudo apt install docker-ce

sudo systemctl status docker

												KUBERNATE - INSTALL
										----------------------------------



######### 1) Set hostname on Each Node  ###############

sudo hostnamectl set-hostname "k8smaster.example.net"

sudo hostnamectl set-hostname "k8sworker1.example.net"   // 1st worker node

sudo hostnamectl set-hostname "k8sworker2.example.net"   // 2nd worker node



######## 2) Disable swap & Add kernel Parameters #########

sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter


sudo tee /etc/sysctl.d/kubernetes.conf <<EOT
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOT

sudo sysctl --system


######## 3) Install Containerd Runtime ##########

sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"


sudo apt update
sudo apt install -y containerd.io

containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml


sudo systemctl restart containerd
sudo systemctl enable containerd



####### 4) Add Apt Repository for Kubernetes ###########


curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
 
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list



###### 5) Install Kubectl, Kubeadm and Kubelet ########

sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

####### 6) Connect master node ########
-> this comman put in master node (kubeadm token create --print-join-command)

-> put in kubeadm id then will connected

#######################################################################################################################################
-------------------------------------------------------- Pod Depolyment ---------------------------------------------------------------
#######################################################################################################################################

													Kubernates-Deployment-Nginx
											------------------------------------------

-->mkdir script
   cd script
->nano nginx-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80

-->kubectl apply -f nginx-deployment.yaml

next......

-->nano nginx-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: NodePort  # Capitalized 'N' and 'P' as per Kubernetes convention
  selector:
    app: nginx
  ports:
    - port: 80
      nodePort: 32324
      targetPort: 80  # Assuming the container is listening on port 80


-->kubectl apply -f nginx-service.yaml
  
next......

>check --> kubectl get pods -o wide
>check --> kubectl get svc -o wide (then u will check port then browse <maternode ip:port><http://masternode ip:port>
